{"version":3,"sources":["scripts/main.js"],"names":["serverURL","phonesEndpoint","mobiles","getPhones","Promise","resolve","reject","setTimeout","Error","fetch","then","response","json","phones","combinePhoneWithDetails","phone","phoneDetails","phoneWithDetails","key","hasOwnProperty","copyProperty","deepCopy","original","copy","phonesIds","requests","map","id","phoneId","all","phonesDetails","phonesList","document","createElement","forEach","li","innerText","name","append","body","find","mobile","catch","error","errorMessage","message"],"mappings":";AAAA,aA+FC,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GA7FD,IAAMA,EAAY,6DAEZC,EAAiB,cACnBC,EAAU,GA0Cd,SAASC,IACA,OAAA,IAAIC,QAAQ,SAACC,EAASC,GAC3BC,WAAW,WACTD,EAAO,IAAIE,MAAM,4BAChB,KAEHC,MAAMT,EAAYC,GACfS,KAAK,SAAAC,GAAYA,OAAAA,EAASC,SAC1BF,KAAK,SAAAG,GAAUR,OAAAA,EAAQQ,OAI9B,SAASC,EAAwBC,EAAOC,GAChCC,IAAAA,EAAmB,GAEpB,IAAA,IAAMC,KAAOH,EAChBE,EAAiBC,GAAOH,EAAMG,GAG3B,IAAA,IAAMA,KAAOF,EACZ,IAACC,EAAiBE,eAAeD,GAC/B,GAA6B,WAA7B,EAAOF,EAAaE,IAAmB,CACnCE,IAAAA,EAAeC,EAASL,EAAaE,IAE3CD,EAAiBC,GAAOE,OAExBH,EAAiBC,GAAOF,EAAaE,GAKpCD,OAAAA,EAGT,SAASI,EAASC,GACVC,IAAAA,EAAO,GAER,IAAA,IAAML,KAAOI,EACZ,GAAyB,WAAzB,EAAOA,EAASJ,IAClBK,EAAKL,GAAOI,EAASJ,OAChB,CACCE,IAAAA,EAAeC,EAASC,EAASJ,IAEvCK,EAAKL,GAAOE,EAITG,OAAAA,EAvFTpB,IACGO,KAAK,SAAAG,GACEW,IACAC,EADYZ,EAAOa,IAAI,SAAAX,GAASA,OAAAA,EAAMY,KACjBD,IAAI,SAAAE,GACtBnB,OAAAA,MAAMT,EAAuB4B,WAAAA,OAAAA,EAAxB,UACTlB,KAAK,SAAAC,GAAYA,OAAAA,EAASC,WAKxBR,OAFPF,EAAUW,EAAOa,IAAI,SAAAX,GAASA,OAAAA,IAEvBX,QAAQyB,IAAIJ,KAEpBf,KAAK,SAAAoB,GACEC,IAAAA,EAAaC,SAASC,cAAc,MAWnCH,OATPA,EAAcI,QAAQ,SAAAlB,GACdmB,IAAAA,EAAKH,SAASC,cAAc,MAElCE,EAAGC,UAAYpB,EAAaqB,KAC5BN,EAAWO,OAAOH,KAGpBH,SAASO,KAAKD,OAAOP,GAEdD,IAERpB,KAAK,SAAAoB,GACJA,EAAcJ,IAAI,SAAAV,GAGTF,OAAAA,EAFOZ,EAAQsC,KAAK,SAAAC,GAAUA,OAAAA,EAAOd,KAAOX,EAAaW,KAE1BX,OAGzC0B,MAAM,SAAAC,GACCC,IAAAA,EAAeZ,SAASC,cAAc,MAE5CW,EAAaR,UAAYO,EAAME,QAC/Bb,SAASO,KAAKD,OAAOM","file":"main.f526f70d.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst serverURL = 'https://mate-academy.github.io/'\n+ 'phone-catalogue-static/api/';\nconst phonesEndpoint = 'phones.json';\nlet mobiles = [];\n\ngetPhones()\n  .then(phones => {\n    const phonesIds = phones.map(phone => phone.id);\n    const requests = phonesIds.map(phoneId => {\n      return fetch(serverURL + `/phones/${phoneId}.json`)\n        .then(response => response.json());\n    });\n\n    mobiles = phones.map(phone => phone);\n\n    return Promise.all(requests);\n  })\n  .then(phonesDetails => {\n    const phonesList = document.createElement('ul');\n\n    phonesDetails.forEach(phoneDetails => {\n      const li = document.createElement('li');\n\n      li.innerText = phoneDetails.name;\n      phonesList.append(li);\n    });\n\n    document.body.append(phonesList);\n\n    return phonesDetails;\n  })\n  .then(phonesDetails => {\n    phonesDetails.map(phoneDetails => {\n      const phone = mobiles.find(mobile => mobile.id === phoneDetails.id);\n\n      return combinePhoneWithDetails(phone, phoneDetails);\n    });\n  })\n  .catch(error => {\n    const errorMessage = document.createElement('h1');\n\n    errorMessage.innerText = error.message;\n    document.body.append(errorMessage);\n  });\n\nfunction getPhones() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error('Your request timed out'));\n    }, 5000);\n\n    fetch(serverURL + phonesEndpoint)\n      .then(response => response.json())\n      .then(phones => resolve(phones));\n  });\n}\n\nfunction combinePhoneWithDetails(phone, phoneDetails) {\n  const phoneWithDetails = {};\n\n  for (const key in phone) {\n    phoneWithDetails[key] = phone[key];\n  }\n\n  for (const key in phoneDetails) {\n    if (!phoneWithDetails.hasOwnProperty(key)) {\n      if (typeof phoneDetails[key] === 'object') {\n        const copyProperty = deepCopy(phoneDetails[key]);\n\n        phoneWithDetails[key] = copyProperty;\n      } else {\n        phoneWithDetails[key] = phoneDetails[key];\n      }\n    }\n  }\n\n  return phoneWithDetails;\n}\n\nfunction deepCopy(original) {\n  const copy = {};\n\n  for (const key in original) {\n    if (typeof original[key] !== 'object') {\n      copy[key] = original[key];\n    } else {\n      const copyProperty = deepCopy(original[key]);\n\n      copy[key] = copyProperty;\n    }\n  }\n\n  return copy;\n}\n"]}